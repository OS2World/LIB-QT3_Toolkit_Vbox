#
# $Id: qmake.conf 157 2006-12-03 17:13:16Z dmik $
#
# qmake configuration for os2-g++
#
# Written for Innotek GCC and IBM ILINK
#
# :mode=makefile:tabSize=8:indentSize=4:noTabs=true:
#

MAKEFILE_GENERATOR	= GNUMAKE
TEMPLATE		= app
CONFIG			+= qt warn_on release link_prl

QMAKE_QT_DLL_TARGET     = myqt

exists( $(QTDIR)\.qtos2config ) {
        include( $(QTDIR)\.qtos2config )
}
exists( $(QTDIR)\.qtbuild ) {
        include( $(QTDIR)\.qtbuild )
}

QMAKE_LEX		= flex
QMAKE_LEXFLAGS		=
QMAKE_YACC		= byacc
QMAKE_YACCFLAGS		= -d

QMAKE_CC		= gcc
QMAKE_CFLAGS		= -Zomf
QMAKE_CFLAGS_WARN_ON	= -Wall
QMAKE_CFLAGS_WARN_OFF	= -w
QMAKE_CFLAGS_RELEASE	= -s -O2
QMAKE_CFLAGS_DEBUG	= -g
QMAKE_CFLAGS_MT     = -Zmt
QMAKE_CFLAGS_MT_DBG = -Zmt
QMAKE_CFLAGS_MT_DLL = -Zmt
QMAKE_CFLAGS_MT_DLLDBG  = -Zmt
QMAKE_CFLAGS_YACC	= -Wno-unused -Wno-parentheses
QMAKE_CFLAGS_RTTI_ON	=
QMAKE_CFLAGS_RTTI_OFF	=
QMAKE_CFLAGS_EXCEPTIONS_ON = -fexceptions
QMAKE_CFLAGS_EXCEPTIONS_OFF = -fno-exceptions

QMAKE_CFLAGS_INCDIR     = -I

QMAKE_CXX		= g++
QMAKE_CXXFLAGS		= $$QMAKE_CFLAGS
QMAKE_CXXFLAGS_DEPS	= $$QMAKE_CFLAGS_DEPS
QMAKE_CXXFLAGS_WARN_ON	= $$QMAKE_CFLAGS_WARN_ON
QMAKE_CXXFLAGS_WARN_OFF	= $$QMAKE_CFLAGS_WARN_OFF
QMAKE_CXXFLAGS_RELEASE	= $$QMAKE_CFLAGS_RELEASE
QMAKE_CXXFLAGS_DEBUG	= $$QMAKE_CFLAGS_DEBUG
QMAKE_CXXFLAGS_MT   = $$QMAKE_CFLAGS_MT
QMAKE_CXXFLAGS_MT_DBG   = $$QMAKE_CFLAGS_MT_DBG
QMAKE_CXXFLAGS_MT_DLL   = $$QMAKE_CFLAGS_MT_DLL
QMAKE_CXXFLAGS_MT_DLLDBG= $$QMAKE_CFLAGS_MT_DLLDBG
QMAKE_CXXFLAGS_YACC	= $$QMAKE_CFLAGS_YACC
QMAKE_CXXFLAGS_RTTI_ON	= -frtti
QMAKE_CXXFLAGS_RTTI_OFF	= -fno-rtti
QMAKE_CXXFLAGS_EXCEPTIONS_ON = $$QMAKE_CFLAGS_EXCEPTIONS_ON
QMAKE_CXXFLAGS_EXCEPTIONS_OFF = $$QMAKE_CFLAGS_EXCEPTIONS_OFF

QMAKE_INCDIR		=
QMAKE_INCDIR_QT		= $(QTDIR)\include
QMAKE_LIBDIR_QT		= $(QTDIR)\lib
QMAKE_LIBDIR_QT_DEBUG   = $(QTDIR)\lib\debug

QMAKE_DEFINES_QT        +=

# As a workaround for the CMD.EXE command line length limitation (1024 chars)
# we generate response files with options using the envcat.cmd helper script,
# instead of specifying options directly on the command line.

qmake_cflags.target = $(OBJECTS_DIR)\.cflags
qmake_cflags.depends = $(MAKEFILE_LIST)
qmake_cflags.extradeps = export CFLAGS ?= $(CFLAGS)
qmake_cflags.commands = \
    "$(QMAKESPECDIR)\envcat.cmd" CFLAGS > $$qmake_cflags.target

qmake_cxxflags.target = $(OBJECTS_DIR)\.cxxflags
qmake_cxxflags.depends = $(MAKEFILE_LIST)
qmake_cxxflags.extradeps = export CXXFLAGS ?= $(CXXFLAGS)
qmake_cxxflags.commands = \
    "$(QMAKESPECDIR)\envcat.cmd" CXXFLAGS > $$qmake_cxxflags.target

qmake_incpath.target = $(OBJECTS_DIR)\.incpath
qmake_incpath.depends = $(MAKEFILE_LIST)
qmake_incpath.extradeps = export INCPATH ?= $(INCPATH)
qmake_incpath.commands = \
    "$(QMAKESPECDIR)\envcat.cmd" INCPATH > $$qmake_incpath.target

QMAKE_EXTRA_TARGETS	+= qmake_cflags qmake_cxxflags qmake_incpath
PRE_TARGETDEPS 		+= $$qmake_cflags.target $$qmake_cxxflags.target $$qmake_incpath.target
QMAKE_QUIET_CLEAN	+= "$$qmake_cflags.target" "$$qmake_cxxflags.target" "$$qmake_incpath.target"

QMAKE_RUN_CC		= $(CC) -c @$$qmake_cflags.target @$$qmake_incpath.target -o $obj $src
QMAKE_RUN_CC_IMP	= $(CC) -c @$$qmake_cflags.target @$$qmake_incpath.target -o $@ $<
QMAKE_RUN_CXX		= $(CXX) -c @$$qmake_cxxflags.target @$$qmake_incpath.target -o $obj $src
QMAKE_RUN_CXX_IMP	= $(CXX) -c @$$qmake_cxxflags.target @$$qmake_incpath.target -o $@ $<

QMAKE_LINK		= g++
QMAKE_LFLAGS		= -Zomf -Zstack 0x2000 -Zmap
QMAKE_LFLAGS_RELEASE	= -s -Zlinker /EXEPACK:2
QMAKE_LFLAGS_DEBUG	=
QMAKE_LFLAGS_CONSOLE	= -Zlinker /PM:VIO
QMAKE_LFLAGS_WINDOWS    = -Zlinker /PM:PM -Zno-fork
QMAKE_LFLAGS_CONSOLE_DLL= -Zdll -Zlinker /PM:VIO
QMAKE_LFLAGS_WINDOWS_DLL= -Zdll -Zlinker /PM:PM -Zno-fork

QMAKE_LFLAGS_LIBDIR     = -L
QMAKE_LFLAGS_LIB        = -l

QMAKE_LFLAGS_QT_DLL     = -lregistry.dll -lsocket

qmake_objects.target = $(OBJECTS_DIR)\.objects
qmake_objects.depends = $(MAKEFILE_LIST)
qmake_objects.extradeps = export OBJECT_FILES = $(OBJECTS) $(OBJMOC)
qmake_objects.commands = \
    "$(QMAKESPECDIR)\envcat.cmd" OBJECT_FILES > $$qmake_objects.target

QMAKE_EXTRA_TARGETS	+= qmake_objects
PRE_TARGETDEPS 		+= $$qmake_objects.target
QMAKE_QUIET_CLEAN	+= "$$qmake_objects.target"

QMAKE_RUN_LINK          = $(LINK) $(LFLAGS) -o $(TARGET) $(DEF_FILE) @$$qmake_objects.target $(LIBS)
QMAKE_RUN_IMPLIB        = emximp -p 64 -o $(basename $(TARGET)).lib $(DEF_FILE)

QMAKE_RUN_GENDEF        = \
    $(if $(QT_DEV_NO_DEF_GENERATION),\
        @echo Warning: .DEF file generation is disabled! \
            (QT_DEV_NO_DEF_GENERATION=$(QT_DEV_NO_DEF_GENERATION)),\ 
        "$(QMAKESPECDIR)\emxexpw.cmd" -name $(basename $(notdir $(TARGET))) \
            $(if $(VERSION),-version $(VERSION)) \
            -def $(DEF_FILE) $(if $(DEF_FILE_MAP),-map $(DEF_FILE_MAP)) \
            $(if $(DEF_FILE_TEMPLATE),-template $(DEF_FILE_TEMPLATE)) \
            @$$qmake_objects.target)
QMAKE_GENDEF_DEPS       = $(OBJECTS) $(OBJMOC)

QMAKE_LIBS		=
QMAKE_LIBS_CONSOLE	=
QMAKE_LIBS_WINDOWS	=
QMAKE_LIBS_QT		= qt registry.dll socket
QMAKE_LIBS_QT_THREAD	= qt registry.dll socket
QMAKE_LIBS_QT_DLL	= $$QMAKE_QT_DLL_TARGET
QMAKE_LIBS_QT_THREAD_DLL= $$QMAKE_QT_DLL_TARGET
QMAKE_LIBS_QT_ENTRY     =

QMAKE_LIB		= emxomfar r
QMAKE_RUN_LIB           = $(LIB) $(TARGET) $(OBJECTS) $(OBJMOC)

QMAKE_MOC		= $(QTDIR)\bin\moc.exe
QMAKE_UIC		= $(QTDIR)\bin\uic.exe
QMAKE_IDC		= $(QTDIR)\bin\idc.exe

QMAKE_IDL		=

QMAKE_RC		= rc
QMAKE_RUN_RC_RES	= set INCLUDE=%INCLUDE%;$(INCLUDEPATH) & $(RC) -n -r $(RC_FILE) $(RES_FILE)
QMAKE_RUN_RC_EXE	= $(RC) -n -x2 $(RES_FILE) $(TARGET)

QMAKE_ZIP		= zip -r -9

QMAKE_COPY		= copy
QMAKE_MOVE		= move
QMAKE_DEL_FILE		= del
QMAKE_IF_FILE_EXISTS	= if exist
QMAKE_DEL_DIR		= rmdir
QMAKE_CHK_DIR_EXISTS	= if not exist
QMAKE_MKDIR		= mkdir
